// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_scale
Rcpp::NumericVector compute_scale(Rcpp::RObject mat, Rcpp::RObject centering);
RcppExport SEXP _BiocSingular_compute_scale(SEXP matSEXP, SEXP centeringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type centering(centeringSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_scale(mat, centering));
    return rcpp_result_gen;
END_RCPP
}
// set_omp_threads
Rcpp::IntegerVector set_omp_threads(Rcpp::IntegerVector nthreads);
RcppExport SEXP _BiocSingular_set_omp_threads(SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(set_omp_threads(nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BiocSingular_compute_scale", (DL_FUNC) &_BiocSingular_compute_scale, 2},
    {"_BiocSingular_set_omp_threads", (DL_FUNC) &_BiocSingular_set_omp_threads, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BiocSingular(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
