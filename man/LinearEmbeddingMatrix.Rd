% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LinearEmbeddingMatrix.R
\name{LinearEmbeddingMatrix}
\alias{LinearEmbeddingMatrix}
\alias{sampleFactors}
\alias{featureLoadings}
\alias{factorData}
\alias{sampleFactors,LinearEmbeddingMatrix-method}
\alias{featureLoadings,LinearEmbeddingMatrix-method}
\alias{factorData,LinearEmbeddingMatrix-method}
\alias{sampleFactors<-}
\alias{featureLoadings<-}
\alias{factorData<-}
\alias{sampleFactors<-,LinearEmbeddingMatrix-method}
\alias{featureLoadings<-,LinearEmbeddingMatrix-method}
\alias{factorData<-,LinearEmbeddingMatrix-method}
\alias{as.matrix,LinearEmbeddingMatrix-method}
\alias{dim,LinearEmbeddingMatrix-method}
\alias{dimnames,LinearEmbeddingMatrix-method}
\alias{dimnames<-,LinearEmbeddingMatrix-method}
\alias{dimnames<-,LinearEmbeddingMatrix,ANY-method}
\alias{$,LinearEmbeddingMatrix-method}
\alias{rbind,LinearEmbeddingMatrix-method}
\alias{cbind,LinearEmbeddingMatrix-method}
\alias{[,LinearEmbeddingMatrix,ANY-method}
\alias{[,LinearEmbeddingMatrix,ANY,ANY-method}
\alias{[,LinearEmbeddingMatrix,ANY,ANY,ANY-method}
\alias{[<-,LinearEmbeddingMatrix,ANY,ANY,LinearEmbeddingMatrix-method}
\title{LinearEmbeddingMatrix class}
\usage{
LinearEmbeddingMatrix(sampleFactors = matrix(nrow = 0, ncol = 0),
  featureLoadings = matrix(nrow = 0, ncol = 0), factorData = NULL,
  metadata = list())
}
\arguments{
\item{sampleFactors}{A matrix-like object of sample embeddings, where rows are samples and columns are factors.}

\item{featureLoadings}{A matrix-like object of feature loadings, where rows are features and columns are factors.}

\item{factorData}{A \linkS4class{DataFrame} containing factor-level information, with one row per factor.}

\item{metadata}{An optional list of arbitrary content describing the overall experiment.}
}
\value{
A LinearEmbeddingMatrix object is returned from the constructor.
}
\description{
The LinearEmbeddingMatrix class stores low-dimensional embeddings from linear dimensionality reduction methods,
along with information about the feature loadings and factor-level metadata.
}
\details{
The LinearEmbeddingMatrix class is a matrix-like object where rows represent samples and columns represent factors.
It is designed for the storage of results from linear dimensionality reduction methods.
Principal components analysis (PCA) is the most obvious beneficiary,
but this class can also be used for other techniques like factor analysis and non-negative matrix factorization.

The \code{sampleFactors} slot is intended to store a low-dimensional representation of the samples, 
such as the principal coordinates from PCA.
Each row corresponds to a sample while each column corresponds to a factor.

The feature loadings contributing to each factor are stored in \code{featureLoadings}.
Each row corresponds to an input feature while each column corresponds to a factor.
Thus, \code{featureLoadings} should have the same number of columns as \code{sampleFactors}.

The \code{factorData} stores additional factor-level information such as the percentage of variance explained by each factor.
Each row corresponds to a factor while each column represents a different metadata field.
Thus, it should have the same number of rows as \code{sampleFactors}.

This class ensures that all information related to a linear dimensionality reduction step is retained in a single object.
For example, feature loadings remain attached to the embedding, allowing it to be used in downstream analyses.
}
\section{Getters}{

In the following code snippets, \code{x} is a LinearEmbeddingMatrix instance.
\describe{
\item{\code{sampleFactors(x, withDimnames=TRUE)}:}{
Return a matrix (or matrix-like object) containing sample embeddings.
If \code{withDimnames=TRUE}, the dimension names of the output are the same as \code{dimnames(x)}.
}
\item{\code{factorData(x)}:}{
Return a \linkS4class{DataFrame} of factor-level information.
}
\item{\code{featureLoadings(x, withDimnames=TRUE)}:}{
Return a matrix (or matrix-like object) containing feature loadings.
If \code{withDimnames=TRUE}, the column names of the output are the same as \code{colnames(x)}.
}
\item{\code{dim(x)}:}{
Return an integer vector of length 2 containing the number of rows and columns in \code{x}.
}
\item{\code{dimnames(x)}:}{
Return a list of length 2 containing the row and column names.
Elements are either character vectors or \code{NULL}.
}
\item{\code{x$name}:}{
Return the field in \code{factorData(x)} with name \code{name}.
}
}
}

\section{Setters}{

In the following code snippets, \code{x} is a LinearEmbeddingMatrix instance.
\describe{
\item{\code{sampleFactors(x) <- value}:}{
Replace the sample embeddings in \code{x} with \code{value}, 
a matrix (or matrix-like object) with dimensions equal to \code{dim(x)}.
}
\item{\code{factorData(x)}:}{
Replace the factor-level information in \code{x} with a \linkS4class{DataFrame} \code{value} 
that has number of rows equal to \code{nrow(x)}.
}
\item{\code{featureLoadings(x) <- value}:}{
Replace the feature loadings in \code{x} with \code{value},
a matrix (or matrix-like object) with number of columns equal to \code{ncol(x)}.
}
\item{\code{dimnames(x) <- value}:}{
Replace the dimension names of \code{x} with \code{value}, 
a list of length 2 containing the row and column names.
}
\item{\code{x$name <- value}:}{
Replace the field in \code{factorData(x)} with name \code{name} with \code{value}.
}
}
}

\section{Combining objects}{

In the following code snippets, \code{...} contains one or more LinearEmbeddingMatrix objects.
\describe{
\item{\code{rbind(..., deparse.level=1)}:}{Returns a LinearEmbedddingMatrix 
where all objects in \code{...} are combined row-wise,
i.e., rows in successive objects are appended to the first object.
Refer to \code{?\link[base]{rbind}} for the interpretation of \code{deparse.level}.

All objects in \code{...} must have the exact same values for \code{featureLoadings} and \code{factorData}.
}
\item{\code{cbind(..., deparse.level=1)}:}{Returns a LinearEmbeddingMatrix
where all objects in \code{...} are combined column-wise, 
i.e., columns in successive objects are appended to the first object.
Refer to \code{?\link[base]{cbind}} for the interpretation of \code{deparse.level}.
}
}
}

\section{Subsetting}{

In the following code snippets, \code{x} is a LinearEmbeddingMatrix object.
\describe{
\item{\code{x[i, j, drop=TRUE]}:}{Returns a LinearEmbeddingMatrix containing the 
specified rows \code{i} and columns \code{j}.

\code{i} and \code{j} can be a logical, integer or character vector of subscripts, 
indicating the rows and columns respectively to retain.
Either can be missing, in which case subsetting is only performed in the specified dimension.
If both are missing, no subsetting is performed.

If \code{drop=TRUE} and the subsetting would produce dimensions of length 1, 
those dimensions are dropped and a vector is returned directly from \code{sampleFactors}.
}
\item{\code{x[i, j] <- value}:}{Replaces all data for rows \code{i} and columns {j} 
with the corresponding fields in a LinearEmbeddingMatrix \code{value}.

\code{i} and \code{j} can be a logical, integer or character vector of subscripts, 
indicating the rows and columns respectively to replace.
Either can be missing, in which case replacement is only performed in the specified dimension.
If both are missing, \code{x} is replaced entirely with \code{value}.

If \code{j} is specified, \code{value} is expected to have the same features in \code{featureLoadings} as \code{x}.}
}
}

\section{Other methods}{

\code{as.matrix(x)} returns an ordinary (usually numeric) matrix of sample embeddings from a LinearEmbeddingMatrix \code{x}.

\code{show(object)} prints a message to screen describing the data stored in a LinearEmbeddingMatrix \code{object}.
}

\examples{
lem <- LinearEmbeddingMatrix(matrix(rnorm(1000), ncol=5),
    matrix(runif(20000), ncol=5))
lem

# Getting and setting:
sampleFactors(lem)
sampleFactors(lem) <- sampleFactors(lem) * -1

featureLoadings(lem)
featureLoadings(lem) <- featureLoadings(lem) * -1

factorData(lem)
factorData(lem)$whee <- 1

nrow(lem)
ncol(lem)
colnames(lem) <- LETTERS[seq_len(ncol(lem))]
as.matrix(lem)

# Combining and subsetting:
rbind(lem, lem)
cbind(lem, lem)

lem[1:10,]
lem[,1:5]

lem2 <- lem
lem2[1:10,] <- lem[11:20,]

}
\author{
Aaron Lun, Davide Risso and Keegan Korthauer
}
